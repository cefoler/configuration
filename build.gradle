buildscript {
    ext {
        shadowVersion = "7.0.0"
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:$shadowVersion"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "com.github.johnrengelman.shadow"
//    apply from: "$rootDir/test.gradle"
    apply from: "$rootDir/publish.gradle"

    group "com.cefoler.configuration"
    version "1.1.3-SNAPSHOT"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    ext {
        javaMain = "src/main/java"
        javaTest = "src/test/java"

        guavaVersion = "30.1.1-jre"
        floggerVersion = "0.6"

        lombokVersion = "1.18.20"
        jetbrainsVersion = "22.0.0"
    }

    repositories {
        mavenLocal()
        mavenCentral()

        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }

        maven {
            url "https://jitpack.io"
        }
    }

    dependencies {
        implementation "com.google.guava:guava:$guavaVersion"
        implementation "com.google.flogger:flogger:$floggerVersion"

        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"

        compileOnly "org.jetbrains:annotations:$jetbrainsVersion"
        annotationProcessor "org.jetbrains:annotations:$jetbrainsVersion"

        compileOnly fileTree("libs")
        compileOnly fileTree("$rootDir/libs")
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs += [
                "-Xlint:all",
                "-Xlint:-options",
                "-Xlint:-path",
                "-Xlint:-try"
        ]

        options.encoding = "UTF-8"
    }

    tasks.withType(Jar) {
        from "LICENSE.md"
    }

    shadowJar {
        relocate "com.google.common", "com.celeste.guava"
        relocate "com.google.common.flogger", "com.celeste.flogger"
    }

}


//plugins {
//    id "java"
//    id "com.github.johnrengelman.shadow" version "7.0.0"
//}
//
//group "com.cefoler.configuration"
//version "1.1.3-SNAPSHOT"
//
//sourceCompatibility = JavaVersion.VERSION_1_8
//targetCompatibility = JavaVersion.VERSION_1_8
//
//repositories {
//    mavenLocal()
//    mavenCentral()
//
//    maven {
//        url "https://jitpack.io"
//    }
//}
//
//dependencies {
//    final def jackson = "2.13.2.2"
//
//    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson"
//    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson"
//    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-properties:$jackson"
//
//    final def lombok = "org.projectlombok:lombok:1.18.22"
//    final def annotations = "org.jetbrains:annotations:23.0.0"
//
//    compileOnly lombok, annotations
//    annotationProcessor lombok, annotations
//
//    final def junit = "5.8.2"
//
//    testCompileOnly "org.junit.jupiter:junit-jupiter-api:$junit"
//    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit"
//
//    implementation "com.google.guava:guava:31.1-jre"
//}
//
//tasks.withType(JavaCompile) {
//    options.encoding = "UTF-8"
//}
//
//tasks.withType(Jar) {
//    from "LICENSE.md"
//}
//
//shadowJar {
//    relocate "com.fasterxml.jackson", "com.celeste.configuration.jackson"
//    relocate "org.yaml.snakeyaml", "com.celeste.configuration.snakeyaml"
//
//    relocate "com.google.common", "com.celeste.configuration.guava"
//
//    archiveFileName = "Configuration-${project.version}.jar"
//}
